/*
  Variables:
*/

$grid-max-width: 700px;
$grid-padding: 12px;
$grid-border-radius: 4px;

$color-background: #f5f7f8;
$color-accent1: #379777;
$color-accent2: #1bd7d7;
$color-list: #ffd5cd, #efbbcf, #c3aed6, #8675a9, #91ddcf, #f7f9f2, #f4e9dc,
  #f9e79f, #057dc8, #a0e9ff, #bb9ab1;
/**/
*,
*:before,
*:after {
  box-sizing: border-box;
}

button,
a {
  &:hover {
    cursor: pointer;
  }
}

.clearfix::after {
  content: "";
  display: block;
  clear: both;
}

html {
  min-height: 100%;
  width: 100%;
  font-size: 13px;
  font-family: "Rubik", sans-serif;
  line-height: 1.5em;
  color: #fff;
  background: #160140;
  background: linear-gradient(to top, #160140, #3f0071);
}

.wrapper {
  max-width: $grid-max-width;
  margin: 0 auto;
  padding: 15px;
}

h2 {
  font-style: italic;
}

.intro {
  margin-bottom: 70px;
  &_title {
    text-align: center;
    color: $color-accent1;
    font-size: 3rem;
  }
}

.guide {
  border-bottom: 1px solid grey;
  &:first-of-type {
    margin-top: 4rem;
    border-top: 1px solid gray;
  }
  &_arrow {
    display: inline-block;
    margin: 15px;
    font-size: 3rem;
    color: #fff;
  }
}

.controls {
  &_game,
  &_score {
    display: inline-block;
    width: 50%;
    float: left;
    @media all and (max-width: 500px) {
      width: 100%;
    }
  }
  &_game-btn {
    margin-bottom: 1rem;
    padding: 0.5em 0.75em;
    background: transparent;
    color: antiquewhite;
    outline: 2px solid antiquewhite;
    appearance: none;
    border: 5px solid transparent;
    box-shadow: inset 0 0 0px 2px #bb9ab1;
    letter-spacing: 0.1em;
    font-weight: bold;
    text-transform: lowercase;
  }

  &_score {
    display: inline-block;
    min-width: 4rem;
    margin-bottom: 4rem;
    padding: 0.5em 0.75em;
    background: black;
    text-align: center;
    background: linear-gradient(to top, #160140, #3f0071);
  }

  &-label,
  &-text {
    display: inline-block;
  }
  &-label {
    color: initial;
  }
  &-text {
    color: blueviolet;
    font-size: 2rem;
  }
}

.gameboard {
  position: relative;
  width: 100%;
  max-width: 700px;
  height: 100%;
  max-height: 700px;
  margin: auto;
  padding: $grid-padding;
  background: #ffffff08;
  border-radius: $grid-border-radius;
  box-shadow: 0 0 8px 0px $color-accent1;
  &::before {
    content: "";
    display: block;
    padding-bottom: 100%;
  }
}

.grid {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  bottom: 0;
  right: 0;
  left: 0;
  margina: auto;
  &_cell {
    display: inlime-block;
    height: 25%;
    width: 25%;
    padding: $grid-padding;
    float: left;
    background: rgba(238, 228, 218, 0.35);
    background-clip: content-box;
  }
}

.tile-container {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  margin: auto;
  border-radius: $grid-border-radius;
}

.tile {
  @extend .grid_cell;
  display: table;
  background: #c3aed6;
  background-clip: content-box;
  position: absolute;
  z-index: 2;
  will-change: top, left;
  transition-property: top, left;
  transition: duration 0.175s;
  transition-timing-function: ease-out;

  &.initialize {
    animation-name: newTile;
    animation-duration: 0.175s;
    animation-timing-function: linear;
    animation-fill-mode: forwards;
  }
  @keyframes newTile {
    0% {
      opacity: 0;
    }
    50% {
      opacity: 0;
      transform: scale(0);
    }
    75% {
      opacity: 1;
      transform: scale(0.5);
    }
    100% {
      opacity: 1;
      transform: scale(1);
    }
  }
}
@for $i from 0 through 4 {
  @for $j from 0 through 4 {
    $convertX: $i * (100/4);
    $convertXstring: unquote(
      $string: "#{$convertX}" + "%",
    );
    $convertY: $j * (100/4);
    $convertYstring: unquote(
      $string: "#{$convertY}" + "%",
    );
    .tile[data-x="#{$convertX}"][data-y="#{$convertY}"] {
      top: $convertYstring;
      left: $convertXstring;
    }
  }
}

$i: 2;
$listCounter: 1;

@while $i <=2048 {
  .tile_number[data-value="#{$i}"] {
    background: nth($color-list, $listCounter);
    color: #fff;
    box-shadow: 0 0 1px 1px nth($color-list, $listCounter);
  }
  $i: $i * 2;
  $listCounter: $listCounter + 1;
}
